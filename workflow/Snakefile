from pathlib import Path
import itertools


WORKFLOW = Path("workflow").resolve()
CONFIG = Path("config").resolve()
SCHEMAS = Path("schemas").resolve()
RULES = WORKFLOW / "rules"
ENVS = WORKFLOW / "envs"
SCRIPTS = WORKFLOW / "scripts"
RESULTS = Path("results").resolve()
FIGURES = RESULTS / "figures"
TABLES = RESULTS / "tables"
BENCH = RESULTS / "benchmark"
LOGS = Path("logs/rules").resolve()
GB = 1_000


configfile: CONFIG / "config.yaml"


pepfile: str(CONFIG / "pep/project_config.yaml")


pepschema: str(SCHEMAS / "pep.yaml")


SAMPLES = pep.sample_table["sample_name"]
DEPTHS = sorted(config["QC"]["depths"])
VERSIONS = sorted(list(config["model"].keys()))
MODES = sorted(config["mode"])
MODELS = []
for v in VERSIONS:
    MODELS.extend(list(config["model"][v]))

CALLERS = config["callers"]


target_files = set()

for mode, version, model, depth in itertools.product(MODES, VERSIONS, MODELS, DEPTHS):
    target_files.add(RESULTS / f"QC/stats/prefilter/{mode}/{version}/{model}.csv")
    target_files.add(RESULTS / f"QC/stats/postfilter/{mode}/{version}/{model}.csv")
    target_files.add(
        RESULTS / f"QC/stats/downsample/{depth}x/{mode}/{version}/{model}.csv"
    )
    for sample in SAMPLES:
        for caller in CALLERS:
            for ref in ["self", "mutref"]:
                target_files.add(
                    RESULTS
                    / f"call/{ref}/{caller}/{depth}x/{mode}/{version}/{model}/{sample}.{depth}x.{caller}.filter.vcf.gz"
                )


for sample in SAMPLES:
    target_files.add(FIGURES / f"plot_synteny/{sample}/minimap2.plotsr.png")

target_files.add(TABLES / "mutref_summary.csv")


rule all:
    input:
        target_files,


include: RULES / "common.smk"
include: RULES / "qc.smk"
include: RULES / "truth.smk"
include: RULES / "align.smk"
include: RULES / "call.smk"
