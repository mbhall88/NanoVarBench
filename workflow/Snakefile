from pathlib import Path
import itertools

ROOT = Path(".").resolve()
WORKFLOW = Path("workflow").resolve()
CONFIG = Path("config").resolve()
SCHEMAS = Path("schemas").resolve()
RULES = WORKFLOW / "rules"
ENVS = WORKFLOW / "envs"
SCRIPTS = WORKFLOW / "scripts"
RESULTS = Path("results").resolve()
FIGURES = RESULTS / "figures"
TABLES = RESULTS / "tables"
BENCH = RESULTS / "benchmark"
LOGS = Path("logs/rules").resolve()
READS_DIR = ROOT / "../data/reads/"
GB = 1_000


configfile: CONFIG / "config.yaml"


pepfile: str(CONFIG / "pep/project_config.yaml")


pepschema: str(SCHEMAS / "pep.yaml")


SAMPLES = pep.sample_table["sample_name"]
DEPTHS = sorted(config["QC"]["depths"])
MAX_DEPTH = max(DEPTHS)
VERSIONS = sorted(list(config["model"].keys()))
MODES = sorted(config["mode"])
MODELS = []
for v in VERSIONS:
    MODELS.extend(list(config["model"][v]))

CALLERS = config["callers"]
NO_INDELS = set(config["no_indels"])

COMBINATIONS = []

target_files = set()
VCFS = []

for sample in SAMPLES:
    for mode in MODES:
        for version in VERSIONS:
            models = config["model"][version]
            for model in models:
                target_files.add(RESULTS / f"QC/stats/prefilter/{mode}/{version}/{model}.csv")
                target_files.add(RESULTS / f"QC/stats/postfilter/{mode}/{version}/{model}.csv")
                target_files.add(
                    RESULTS / f"QC/stats/downsample/{depth}x/{mode}/{version}/{model}.csv"
                )
                for caller in CALLERS:
                    target_files.add(
                        RESULTS
                        / f"assess/mutref/{caller}/{depth}x/{mode}/{version}/{model}/{sample}/{sample}.precision-recall.tsv"
                    )
                    target_files.add(
                        RESULTS
                        / f"assess/mutref/{caller}/{depth}x/{mode}/{version}/{model}/{sample}/{sample}.without_repetitive_regions.precision-recall.tsv"
                    )
                    


for sample in SAMPLES:
    target_files.add(FIGURES / f"plot_synteny/{sample}/minimap2.plotsr.png")
    target_files.add(
        RESULTS / f"assess/mutref/illumina/{sample}/{sample}.precision-recall.tsv"
    )
    target_files.add(
        RESULTS
        / f"assess/mutref/illumina/{sample}/{sample}.without_repetitive_regions.precision-recall.tsv"
    )

for version in VERSIONS:
    target_files.add(FIGURES / f"depth_plots/{version}.snp.pdf")
    target_files.add(RESULTS / f"assess/mutref/annotations/{version}_annotations.csv")
    target_files.add(FIGURES / f"read_identity/{version}.pdf")
    target_files.add(FIGURES / f"benchmark_resources/{version}.pdf")
    target_files.add(FIGURES / f"false_calls/{version}/false_calls.density.pdf")
    for p in [
    FIGURES / f"best_f1_plots/{version}/{metric}.pdf" for metric in ["f1", "recall", "precision"]
    ]:
        target_files.add(p)

    for model in config["model"][version]:
        target_files.add(FIGURES / f"precision_recall_curve/{version}/{model}.pdf")

target_files.add(TABLES / "mutref_summary.csv")


rule all:
    input:
        target_files,


include: RULES / "common.smk"
include: RULES / "basecall.smk"
include: RULES / "qc.smk"
include: RULES / "truth.smk"
include: RULES / "align.smk"
include: RULES / "call.smk"
include: RULES / "assess.smk"
